
Option Explicit

'*****************************************************************************
'Define General Variables Across The Module
'*****************************************************************************

Dim n, lowerLimit, upperLimit, dx, n_point As Integer           'Input variables
Dim i As Integer, j As Integer                                  'Step variables for looping
Dim x, y As Double                                              'x and f(x) in functions


'*****************************************************************************
'Functions of Numerical Integration
'*****************************************************************************

'Function trapezoidal rule 1
Function TRAP_numint(x, y, n) As Double
    TRAP_numint = 0
    For i = 2 To n + 1
        TRAP_numint = TRAP_numint + 0.5 * (x(i) - x(i - 1)) * (y(i - 1) + y(i))         'Sum up integrated values from looping down input vectors
    Next i
End Function


'Function trapezoidal rule 2 (Example of condition checking for input arguments)
Function TRAPnumint(x, y) As Double
Dim m As Integer, n As Integer, T As Integer, Trap As Double
    n = Application.Count(x)                            'Size of x
    m = Application.Count(y)                            'Size of y
    
    If m <> n Then
        MsgBox "Inconsistent size of inputs for trapezoidal intergration."      'Alert if input sizes are inconsistent
        TRAPnumint = CVErr(xlErrValue)                                          'Return error
        Exit Function                                                           'Exit function for eror
    End If
    
    Trap = 0                                                        'Initial value of integration
    For T = 2 To n
        Trap = Trap + 0.5 * (x(T) - x(T - 1)) * (y(T - 1) + y(T))   'Perform integration
    Next
    TRAPnumint = Trap                                               'Return result
End Function


'Function of Simpson's rule
Function SIMP_numint(y, n, dx) As Double
    SIMP_numint = 0
    For j = 1 To n / 2
        i = (j * 2) - 1
        SIMP_numint = SIMP_numint + (1 / 3) * (y(i) + 4 * y(i + 1) + y(i + 2)) * dx     'Sum up integrated values from looping down input vectors
    Next j
End Function


'Function of Simpson's 3/8 rule
Function SIMP38_numint(y, n, dx) As Double
    SIMP38_numint = 0
    For j = 1 To n / 3
        i = (j * 3) - 2
        SIMP38_numint = SIMP38_numint + (3 / 8) _
        * (y(i) + 3 * y(i + 1) + 3 * y(i + 2) + y(i + 3)) * dx                          'Sum up integrated values from looping down input vectors
    Next j
End Function


'Function of Boole's rule
Function BOOLE_numint(y, n, dx) As Double
    BOOLE_numint = 0
    For j = 1 To n / 4
        i = (j * 4) - 3
        BOOLE_numint = BOOLE_numint + (1 / 45) * _
            (14 * y(i) + 64 * y(i + 1) + 24 * y(i + 2) _
            + 64 * y(i + 3) + 14 * y(i + 4)) * dx                                       'Sum up integrated values from looping down input vectors
    Next j
End Function


'Function of 10-poins Gauss Legendre quadrature
Function GLQuad10_numint(function_name, lowerLimit, upperLimit, dx)
    
    'Define variables of the function
    Dim x(5) As Double, w(5) As Double                          '5 abscissas(x) and 5 weights(w) for positive/negative x
    Dim x_mid As Double, x_range As Double                      'Mid point and range of x
    Dim sum As Double                                           'Variable to store values of integrated ranges
    
    'Roots and corresponding weights of Legendre polynomials
    x(1) = 0.1488743389: x(2) = 0.4333953941
    x(3) = 0.6794095682: x(4) = 0.8650633666
    x(5) = 0.9739065285
    w(1) = 0.2955242247: w(2) = 0.2692667193
    w(3) = 0.2190863625: w(4) = 0.1494513491
    w(5) = 0.0666713443
    
    'Numerical integration by summing up weighted roots
    x_mid = 0.5 * (upperLimit + lowerLimit)                     'Mid point of range
    x_range = 0.5 * (upperLimit - lowerLimit)                   'Distance of half range
    sum = 0
    For i = 1 To 5
        dx = x(i) * x_range
        sum = sum + w(i) * (Run(function_name, x_mid + dx) _
            + Run(function_name, x_mid - dx))                   'Sum up weighted integration for function specified
    Next i
    
    'Expand integral from [-1,1] to the full range
    GLQuad10_numint = sum * x_range
End Function


'Function of General Gauss Legendre quadrature
Function GLQuadGeneral_numint(function_name As String, lowerLimit, upperLimit, n_point, epsilon_root, maxIter, dx)
    
    'Define variables of the function
    Dim x(100), w(100), m As Double                             'Maximum no. of x and w in arrays and no. of points for positive/negative x
    Dim x_mid, x_range, root_old, root_new As Double            'Mid point, range, starting and ending values of x
    Dim P_nPlus1, P_n, P_nMinus1, dP As Double                  'Leading, current, lagging and derivative values of Legendre polynomial
    Dim iterCount As Integer
    
    'Check if no. of points is even for symmetric range calculation
    If n_point Mod 2 = 1 Then                                   'If no. of points is an odd number
        MsgBox ("Please input even no. of points")              'Alert for odd n_point
        Exit Function                                           'Exit calculation
    Else
        m = n_point / 2                                         'Otherwise calculate number of point in positive/negative range
    End If
    
    'Define mid point and half distance of range
    x_mid = 0.5 * (upperLimit + lowerLimit)                     'Mid point of range
    x_range = 0.5 * (upperLimit - lowerLimit)                   'Distance of half range
            
    'Calculate weights of roots based on Legendre orthogonal polynomials
    For i = 1 To m                                                                              'Loop over positive/negative range                                   '
        iterCount = 0
        root_old = Cos(Application.Pi() * (i - 0.25) / (n_point + 0.5))                         'Initial approximation of roots by Chebychev polynomials
        root_new = 0
        
        'Recursion for Legendre polynomials calculation
        Do Until (Abs(root_old - root_new) < epsilon_root)                                      'Control maximum tolerance for difference in roots
            P_nPlus1 = 1
            P_n = 0
            For j = 1 To n_point                                                                'Loop in no. of points
                P_nMinus1 = P_n: P_n = P_nPlus1
                P_nPlus1 = ((2 * j - 1) * root_old * P_n - (j - 1) * P_nMinus1) / j             'Update legendre polynomials
            Next j
            dP = n_point * (root_old * P_nPlus1 - P_n) / (root_old ^ 2 - 1)                     'Calculate the derivatives of legendre polynomials
            root_new = root_old
            root_old = root_new - P_nPlus1 / dP                                                 'Update roots
            iterCount = iterCount + 1                                                           'Update no. of iteration
            If iterCount > maxIter Then
                MsgBox ("Maximum iteration reached, please check for function convergence.")    'Alert if maximum iteration reached
                Exit Do                                                                         'and end looping
            End If
        Loop
        
        x(i) = x_mid - x_range * root_old                                                       'Calculate root point over range
        x(n_point + 1 - i) = x_mid + x_range * root_old                                         'Update root point
        w(i) = 2 / ((1 - root_old ^ 2) * dP ^ 2)                                                'Calculate weight of root found
        w(n_point + 1 - i) = w(i)                                                               'Update point to weight
    Next i
    
    'Return summed value and expand integral from [-1,1] to the full range
    GLQuadGeneral_numint = 0
    For i = 1 To n_point                                                                        'Loop over points
        GLQuadGeneral_numint = GLQuadGeneral_numint + w(i) * x_range * Run(function_name, x(i)) 'Sum up weighted integration for function specified
    Next i
End Function

