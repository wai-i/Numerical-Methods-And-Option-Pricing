
Option Explicit



' CRR Binomial Tree for European Vanilla Option

Function CRREuro(S As Double, k As Double, T As Double, r As Double, sigma As Double, n As Integer, CallPut As String)
    Dim dt As Double, u As Double, d As Double, q As Double, Payoff As Double, i As Integer
    dt = T / n                                                                  'Time period per step
    u = Exp(sigma * (dt ^ 0.5)): d = 1 / u                                      'Up/down movement
    q = (Exp(r * dt) - d) / (u - d)                                             'Probability of up move
    Payoff = 0
    For i = 0 To n
        Select Case CallPut
        Case "Call":
            Payoff = Payoff + NCombin(n, i) * q ^ i * (1 - q) ^ (n - i) _
                * Application.Max(S * u ^ i * d ^ (n - i) - k, 0)               'Terminal option payoff for European call
        Case "Put":
            Payoff = Payoff + NCombin(n, i) * q ^ i * (1 - q) ^ (n - i) _
                * Application.Max(k - S * u ^ i * d ^ (n - i), 0)               'Terminal option payoff for European put
        End Select
    Next i
    CRREuro = Exp(-r * T) * Payoff                                              'Return result of discounted payoff
End Function


' Adjusted Barrier for Different Monitoring Windows

Function AdjBarrier(S As Double, Barrier As Double, T As Double, sigma As Double, MonFreq As String)
    Dim Sign As Integer, beta As Double
    beta = 0.5826                                                   'Sensitivity to change volatility measured in different time interval from Broadie, Glasserman, and Kou (1997, 1999)
    If Barrier > S Then
        Sign = 1                                                    'Indicator of barrier for up option when Barrier>S
    Else
        Sign = -1                                                   'Indicator of barrier for down option when Barrier<S
    End If
    
    'Adjust for differing monitoring frequency
    Select Case MonFreq
        Case "Continuously": AdjBarrier = Barrier                                               'Retain continuously-monitoring barrier
        Case "Hourly": AdjBarrier = Barrier * Exp(Sign * beta * sigma * Sqr(1 / (24 * 365))) 'Hourly-monitoring barrier
        Case "Daily": AdjBarrier = Barrier * Exp(Sign * beta * sigma * Sqr(1 / 365))          'Daily-monitoring barrier
        Case "Weekly": AdjBarrier = Barrier * Exp(Sign * beta * sigma * Sqr(1 / 52))          'Weekly-monitoring barrier
        Case "Monthly": AdjBarrier = Barrier * Exp(Sign * beta * sigma * Sqr(1 / 12))         'Monthly-monitoring barrier
    End Select
End Function


' Tian's Flexible Bianomial Tree for Barrier Option Pricing

Function TianBinDBarrier(S As Double, k As Double, AdjBar As Double, T As Double, r As Double, sigma As Double, n As Integer, OptType As String, CallPut As String)
Dim dt As Double, u0 As Double, d0 As Double, q0 As Double, N0 As Double, lambda As Double
Dim u As Double, d As Double, q As Double, PU As Double
Dim i As Integer, j As Integer

    If (OptType = "DO" Or OptType = "DI") And AdjBar > S Then
        MsgBox "Error: Barrier must be less than the S price for a Down-and-out or Down-and-in option"    'Alert for knocked barrier for down option
        TianBinDBarrier = CVErr(xlErrValue)
        Exit Function
    ElseIf (OptType = "UO" And OptType = "UI") And AdjBar < S Then
        MsgBox "Error: Barrier must be less than the S price for an Up-and-out or Up-and-in option"       'Alert for knocted barrier for up option
    End If
    
    dt = T / n                                                                  'Period per step
    u0 = Exp(sigma * Sqr(dt)): d0 = 1 / u0                                      'Unadjusted up/down move
    q0 = (Exp(r * dt) - d0) / (u0 - d0)                                         'Unadjusted probability of up move
    N0 = Round(Log(AdjBar / S) / Log(d0))                                       'Barrier expected to be hit after N0 step, the nearest integer of log function
    lambda = (Log(AdjBar / S) + N0 * sigma * Sqr(dt)) / (N0 * sigma ^ 2 * dt)   'Tilting parameter
    u = Exp(sigma * Sqr(dt) + lambda * sigma ^ 2 * dt)                          'Tilted up move
    d = Exp(-sigma * Sqr(dt) + lambda * sigma ^ 2 * dt)                         'Tilted down move
    q = (Exp(r * dt) - d) / (u - d)                                             'Adjusted probability of up move
    
    'Build stock price tree
    Dim SP(), OP() As Double                                                        'Stock price and option payoff arrays
    ReDim SP(n + 1, n + 1), OP(n + 1, n + 1)
    SP(1, 1) = S                                                                    'Spot as initial value
    For j = 1 To UBound(SP, 2)                                                      'Loop over periods
        For i = 1 To j
            If j <= N0 + 1 Then
                SP(i, j) = SP(1, 1) * u ^ (j - i) * d ^ (i - 1)                     'First stage asset price with tilting to ensure nodes lie on barrier
            Else
                SP(i, j) = SP(1, 1) * d ^ (N0) * u0 ^ (j - i) * d0 ^ (i - N0 - 1)   'Second stage asset price with zero tilting
            End If
            SP(i, j) = Round(SP(i, j) * 10000, 5) / 10000                           'Smoothing stock price
        Next i
    Next j
    
    'Build option payoff tree
    For i = 1 To UBound(SP, 1)
        If (SP(i, n + 1) <= AdjBar And (OptType = "DI" Or OptType = "DO")) _
        Or (SP(i, n + 1) >= AdjBar And (OptType = "UI" Or OptType = "UO")) _
        Then
            OP(i, n + 1) = 0                                                        'U/D payoff for stock price with respected to the barrier
        Else
            Select Case CallPut
                Case "Call": OP(i, n + 1) = Application.Max(SP(i, n + 1) - k, 0)    'Terminal call payoff if not knocked out
                Case "Put": OP(i, n + 1) = Application.Max(k - SP(i, n + 1), 0)     'Terminal put payoff if not knocked out
            End Select
        End If
    Next i
    
    For j = n To 1 Step -1
        For i = 1 To j
            If (SP(i, j) <= AdjBar And (OptType = "DI" Or OptType = "DO")) _
            Or (SP(i, j) >= AdjBar And (OptType = "UI" Or OptType = "UO")) _
            Then
                OP(i, j) = 0                                                        'U/D payoff for stock price with respected to the barrier
            Else
                If j <= N0 Then
                    PU = q                                                                  'Stage 1 up probability if not knocked out
                Else
                    PU = q0                                                                 'Stage 2 up probability if not knocked out
                End If
                OP(i, j) = Exp(-r * dt) * (PU * OP(i, j + 1) + (1 - PU) * OP(i + 1, j + 1)) 'Option value as discount expcted payoff
            End If
        Next i
    Next j
    If OptType = "DO" Or OptType = "UO" Then                                                'Differenciate prices by parity that sum of in-and-out option equals vanilla option payoff
        TianBinDBarrier = OP(1, 1)
    Else
        TianBinDBarrier = CRREuro(S, k, T, r, sigma, n, CallPut) - OP(1, 1)
    End If
End Function




